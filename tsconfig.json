{
  "compilerOptions": {
    "target": "ESNext", // 编译目标版本为 ESNext，可以根据需要选择其他版本
    "module": "ESNext", // 使用 ES 模块格式进行模块化
    "lib": ["DOM", "ESNext"], // 引入需要的类型声明库，例如 DOM 和 ESNext
    "strict": true, // 开启严格模式，包括所有严格类型检查选项
    "moduleResolution": "node", // 使用 Node 解析模块路径
    "jsx": "react", // 使用 React 的 JSX 语法
    "baseUrl": ".", // 设置 baseUrl 为当前目录
    "esModuleInterop": true, // 启用 ES 模块的默认导出转换为 CommonJS 格式的 Interop
    "paths": {
      "@/*": ["src/*"],
      "store/*": ["src/store/*"], // 修正映射路径
      "utils/*": ["src/library/utils/*"] // 修正映射路径
    }
  },
  "include": ["src/*"], // 需要包含在编译中的源代码目录，这里设置为 "src"，你可以根据实际情况进行修改
  "exclude": ["node_modules"] // 需要排除的目录，这里排除了 "node_modules"
}
// "resolveJsonModule": true, // 支持导入 JSON 文件
// "skipLibCheck": false, // true, 跳过对引入但未使用的库的检查。

/** 
当 "strict": true 时，会开启 TypeScript 的严格模式，包括以下几个严格类型检查选项：

1 "noImplicitAny": 禁止隐式的 any 类型，即所有变量和函数的类型必须显式声明。

2 "strictNullChecks": 对可为 null 或 undefined 的类型进行严格检查，需要进行空值检查或类型断言。

3 "strictFunctionTypes": 对函数类型的参数、返回值和方法签名进行严格检查，包括协变性和逆变性。

4 "strictPropertyInitialization": 类的非可选属性必须在构造函数中进行初始化，或者使用非空断言符号 ! 标记属性已经被初始化。

5 "noImplicitThis": 禁止隐式的 this 类型，即必须显式指定函数的上下文类型。

6 "alwaysStrict": 在生成的 JavaScript 代码中，始终使用严格模式 "use strict"。

7 "strictBindCallApply": 对 bind、call 和 apply 方法的参数类型进行严格检查。

8 "noUnusedLocals": 禁止出现未使用的局部变量。

9 "noUnusedParameters": 禁止出现未使用的函数参数
。*/
